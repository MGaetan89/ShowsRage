apply plugin: 'jacoco'
apply plugin: 'com.android.application'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'kotlin-android'
apply plugin: 'realm-android'

def properties = new Properties()

if (rootProject.file('local.properties').exists()) {
	properties.load(rootProject.file('local.properties').newDataInputStream())
}

android {
	compileSdkVersion 24
	buildToolsVersion '24.0.0'

	defaultConfig {
		applicationId 'com.mgaetan89.showsrage'
		minSdkVersion 15
		targetSdkVersion 24
		versionCode 24
		versionName '1.4.1'
		resConfigs 'en', 'fr'
		testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
		vectorDrawables.useSupportLibrary = true
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_7
		targetCompatibility JavaVersion.VERSION_1_7
	}

	signingConfigs {
		release {
			keyAlias properties.getProperty('signing.keyAlias', '')
			keyPassword properties.getProperty('signing.keyPassword', '')
			storeFile file(properties.getProperty('signing.storeFile', '-'))
			storePassword properties.getProperty('signing.storePassword', '')
		}
	}

	buildTypes {
		debug {
			applicationIdSuffix '.dev'
			testCoverageEnabled true
		}

		release {
			minifyEnabled false

			if (file(signingConfigs.release.storeFile).exists()) {
				signingConfig signingConfigs.release
			}
		}
	}

	sourceSets {
		androidTest.java.srcDirs = ['src/androidTest/kotlin']
		main.java.srcDirs = ['src/main/kotlin']
		test.java.srcDirs = ['src/test/kotlin']
	}

	dataBinding {
		enabled = true
	}

	lintOptions {
		abortOnError false
	}

	testOptions {
		unitTests {
			returnDefaultValues = true
		}
	}
}

tasks.withType(Test) {
	testLogging {
		exceptionFormat 'full'
	}
}

// From https://github.com/nenick/android-gradle-template/blob/master/app/build.jacoco-test-report.gradle
task jacocoTestReport(type: JacocoReport /*, dependsOn: ['test'] */) {
	group = 'Reporting'
	description = 'Generates Jacoco coverage reports: XML and HTML'
	//outputs.upToDateWhen { false }

	// use hidden configuration, for details look into JacocoPlugin.groovy
	jacocoClasspath = configurations['androidJacocoAnt']

	// exclude auto-generated classes and tests
	def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
	def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
	def mainSrc = "${projectDir}/src/main/kotlin"

	sourceDirectories = files([mainSrc])
	classDirectories = files([debugTree])
	executionData = fileTree(dir: projectDir, includes: ['**/*.exec', '**/*.ec'])

	reports {
		csv {
			enabled = false
		}

		html {
			enabled = true
			destination = "${buildDir}/reports/jacoco"
		}

		xml {
			enabled = true
			destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
		}
	}
}

kapt {
	generateStubs = true
}

def googleServicesVersion = '9.2.0'
def supportLibraryVersion = '24.0.0'

dependencies {
	kapt 'com.android.databinding:compiler:2.2.0-alpha4'

	compile "com.android.support:appcompat-v7:${supportLibraryVersion}"
	compile "com.android.support:cardview-v7:${supportLibraryVersion}"
	compile "com.android.support:customtabs:${supportLibraryVersion}"
	compile "com.android.support:design:${supportLibraryVersion}"
	compile "com.android.support:mediarouter-v7:${supportLibraryVersion}"
	compile "com.android.support:palette-v7:${supportLibraryVersion}"
	compile "com.android.support:preference-v7:${supportLibraryVersion}"
	compile "com.android.support:preference-v14:${supportLibraryVersion}"
	compile "com.android.support:recyclerview-v7:${supportLibraryVersion}"
	compile "com.android.support:support-annotations:${supportLibraryVersion}"
	compile "com.android.support:support-v4:${supportLibraryVersion}"
	compile "com.android.support:support-vector-drawable:${supportLibraryVersion}"
	compile 'com.github.bumptech.glide:glide:3.7.0'
	compile 'com.github.bumptech.glide:okhttp-integration:1.4.0'
	compile "com.google.android.gms:play-services-cast:${googleServicesVersion}"
	compile "com.google.firebase:firebase-analytics:${googleServicesVersion}"
	compile "com.google.firebase:firebase-crash:${googleServicesVersion}"
	compile 'com.squareup.okhttp:okhttp:2.5.0'
	compile 'com.squareup.okhttp:okhttp-urlconnection:2.5.0'
	compile 'com.squareup.retrofit:retrofit:1.9.0'
	compile 'jp.wasabeef:glide-transformations:2.0.1'
	compile 'org.jetbrains.kotlin:kotlin-stdlib:1.0.3'

	debugCompile 'com.github.MGaetan89.Kolumbus:kolumbus:v0.8'
	releaseCompile 'com.github.MGaetan89.Kolumbus:kolumbus-no-op:v0.8'

	testCompile('com.squareup.assertj:assertj-android:1.1.1') {
		exclude group: 'com.android.support', module: 'support-annotations'
	}
	testCompile 'junit:junit:4.12'
	testCompile 'org.mockito:mockito-core:2.0.76-beta'

	androidTestCompile "com.android.support:support-annotations:${supportLibraryVersion}"
	androidTestCompile 'com.android.support.test:rules:0.5'
	androidTestCompile 'com.android.support.test:runner:0.5'
	androidTestCompile('com.squareup.assertj:assertj-android:1.1.1') {
		exclude group: 'com.android.support', module: 'support-annotations'
	}
	androidTestCompile 'junit:junit:4.12'
}

apply plugin: 'com.google.gms.google-services'
